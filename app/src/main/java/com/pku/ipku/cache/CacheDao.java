package com.pku.ipku.cache;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table CACHE.
 */
public class CacheDao extends AbstractDao<Cache, String> {

    public static final String TABLENAME = "CACHE";

    /**
     * Properties of entity Cache.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Key = new Property(0, String.class, "url", true, "URL");
        public final static Property Data = new Property(1, String.class, "data", false, "DATA");
    }

    ;


    public CacheDao(DaoConfig config) {
        super(config);
    }

    public CacheDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'CACHE' (" + //
                "'URL' TEXT PRIMARY KEY NOT NULL ," + // 0: url
                "'DATA' TEXT);"); // 1: data
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CACHE'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, Cache entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getKey());

        String data = entity.getData();
        if (data != null) {
            stmt.bindString(2, data);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Cache readEntity(Cursor cursor, int offset) {
        Cache entity = new Cache( //
                cursor.getString(offset + 0), // url
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // data
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, Cache entity, int offset) {
        entity.setKey(cursor.getString(offset + 0));
        entity.setData(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected String updateKeyAfterInsert(Cache entity, long rowId) {
        return entity.getKey();
    }

    /**
     * @inheritdoc
     */
    @Override
    public String getKey(Cache entity) {
        if (entity != null) {
            return entity.getKey();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
